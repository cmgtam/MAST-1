#!/usr/bin/env python

import os
import optparse # Allows for some command line option parsing
import glob

from MAST.mast import MAST
from MAST.parsers import InputParser
from MAST.DAG.mastmon import MASTmon


def main():
    parser = optparse.OptionParser()
    parser.add_option('-m', '--mode', dest='mode', default='interface',
                      help='Determines which mode is used (see README for more info)')
    parser.add_option('-i', '--input', dest='input', default=None,
                      help='Input file to use to run MAST with (sets mode to input)')
    parser.add_option('-o', '--output', dest='output', default=None,
                      help='Output file to print MAST information about run to')
    parser.add_option('-r', '--runmode', dest='runmode', default='run',
                      help='Will start the DAG scheduler and submit jobs to the queue')
    parser.add_option('-v', '--verbose', dest='verbose', default='0',
                      help="Run with verbose messages.")

    (mastopt, mastarg) = parser.parse_args()

    print 'Welcome to Material and Simulation Toolkit (MAST), November 2012 revision.'

    # Set mode to input if an input file is given
    if (mastopt.input is not None):
        mastopt.mode = 'input'

    # Set a default file name
    if (mastopt.mode == 'input') and (mastopt.input is None):
        mastopt.input = 'mast.inp'

    if (mastopt.mode == 'input') and (mastopt.output is None):
        mastopt.output = 'mast.out'

    if (mastopt.mode == 'interface') and (mastopt.runmode is None):
        mastopt.runmode = 'run'

    if (mastopt.mode == 'interface') and (mastopt.runmode == 'run'):
        mastmon = MASTmon()
        if int(mastopt.verbose) == 1:
            mastmon.run(1,1) #TTM run for only 1 dagscheduler iteration. Use crontab to check periodically. 
        else:
            mastmon.run(1,0)

    if (mastopt.mode == 'input'):
        mast = MAST(inputfile=mastopt.input, outputfile=mastopt.output)
        mast.check_independent_loops()

if __name__ == '__main__':
    main()

