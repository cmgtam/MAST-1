#!/usr/bin/env python

import os
import optparse # Allows for some command line option parsing
import glob
import subprocess 

from MAST.mast import MAST
from MAST.parsers import InputParser
from submit import queue_commands
from MAST.utility import dirutil

def main():
    parser = optparse.OptionParser()
    parser.add_option('-m', '--mode', dest='mode', default='interface',
                      help='Determines which mode is used (see README for more info)')
    parser.add_option('-i', '--input', dest='input', default=None,
                      help='Input file to use to run MAST with (sets mode to input)')
    parser.add_option('-o', '--output', dest='output', default=None,
                      help='Output file to print MAST information about run to')
    parser.add_option('-r', '--runmode', dest='runmode', default='run',
                      help='Will start the DAG scheduler and submit jobs to the queue')
    parser.add_option('-v', '--verbose', dest='verbose', default='0',
                      help="Run with verbose messages.")

    (mastopt, mastarg) = parser.parse_args()

    print 'Welcome to the MAterials Simulation Toolkit (MAST), September 2013 version.'

    # Set mode to input if an input file is given
    if (mastopt.input is not None):
        mastopt.mode = 'input'

    # Set a default file name
    if (mastopt.mode == 'input') and (mastopt.input is None):
        mastopt.input = 'mast.inp'

    if (mastopt.mode == 'input') and (mastopt.output is None):
        mastopt.output = 'mast.out'

    if (mastopt.mode == 'interface') and (mastopt.runmode is None):
        mastopt.runmode = 'run'

    if (mastopt.mode == 'interface') and (mastopt.runmode == 'run'):
        mycwd=os.getcwd()
        subdir = os.path.join(dirutil.get_mast_install_path(),'submit')
        os.chdir(subdir)
        mycommand=queue_commands.queue_submission_command() #run the submit.sh script in $MAST_SCRATCH/submit which creates a mastmon in order to do status checking on a compute node
        mysub = subprocess.Popen(mycommand, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        mysub.wait()
        os.chdir(mycwd)
        dirutil.lock_directory(dirutil.get_mast_scratch_path(), 100) #wait until the MASTmon is finished running.
        queue_commands.submit_from_submission_list()
        queue_commands.clear_submission_list()
        dirutil.unlock_directory(dirutil.get_mast_scratch_path())

    if (mastopt.mode == 'input'):
        mast = MAST(inputfile=mastopt.input, outputfile=mastopt.output)
        mast.check_independent_loops()

    if (mastopt.mode == 'interface') and (mastopt.runmode == 'check'):
        mycheck = subprocess.Popen(['ls -l %s' % os.getenv("MAST_CONTROL")],shell=True)
        mycheck.wait()
        print "Any errors printed below:"
        mycheck = subprocess.Popen(['cat %s/errormast' % os.getenv("MAST_CONTROL")],shell=True)
        mycheck.wait()
        print "-------------------------"

    if (mastopt.mode == 'interface') and (mastopt.runmode == 'list'):
        mycheck = subprocess.Popen(['cat %s/submitlist' % os.getenv("MAST_CONTROL")],shell=True)
        mycheck.wait()
if __name__ == '__main__':
    main()

